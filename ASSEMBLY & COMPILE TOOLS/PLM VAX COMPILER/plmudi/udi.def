/*  External declarations for UDI service routines.    */
$SAVE NOLIST

/*************************************************************************/
/*                                                                       */
/*               D I S C L A I M E R   N O T I C E                       */
/*               -------------------   -----------                       */
/*                                                                       */
/*  This document and/or portions of the material and data furnished     */
/*  herewith, was developed under sponsorship of the U. S. Government.   */
/*  Neither the U.S. nor the U.S.D.O.E., nor the Leland Stanford Junior  */
/*  University, nor their employees, nor their respective contractors,   */
/*  subcontractors, or their employees, makes any warranty, express or   */
/*  implied, or assumes any liability or responsibility for accuracy,    */
/*  completeness or usefulness of any information, apparatus, product    */
/*  or process disclosed, or represents that its use will not infringe   */
/*  privately-owned rights.  Mention of any product, its manufacturer,   */
/*  or suppliers shall not, nor is it intended to, imply approval, dis-  */
/*  approval, or fitness for any particular use.  The U. S. and the      */
/*  University at all times retain the right to use and disseminate same */
/*  for any purpose whatsoever.  Such distribution shall be made by the  */
/*  National Energy Software Center at the Argonne National Laboratory   */
/*  and only subject to the distributee furnishing satisfactory proof    */
/*  that he has a valid license from the Intel Corporation in effect.    */
/*                                                                       */
/*-----------------------------------------------------------------------*/
/*									 */
/*		R E V I S I O N   H I S T O R Y				 */
/*									 */
/*    10JAN82  Alex Hunter  1. Added declaration for DQ$SET$DELIMITERS.  */
/*									 */
/*************************************************************************/
 
DECLARE CONNECTION literally 'WORD';

DQ$ALLOCATE: PROCEDURE (size,excep$p) WORD EXTERNAL;
        DECLARE size WORD, excep$p POINTER;
        END;

DQ$ATTACH: PROCEDURE (path$p,excep$p) CONNECTION EXTERNAL;
        DECLARE (path$p,excep$p) POINTER;
        END;

DQ$CHANGE$EXTENSION: PROCEDURE (path$p,extension$p,excep$p) EXTERNAL;
        DECLARE (path$p,extension$p,excep$p) POINTER;
        END;

DQ$CLOSE: PROCEDURE (conn,excep$p) EXTERNAL;
        DECLARE conn CONNECTION, excep$p POINTER;
        END;

DQ$CREATE: PROCEDURE (path$p,excep$p) CONNECTION EXTERNAL;
        DECLARE (path$p,excep$p) POINTER;
        END;

DQ$DECODE$EXCEPTION: PROCEDURE (exception$code,message$p,excep$p)
        EXTERNAL;
        DECLARE exception$code WORD,
                (message$p,excep$p) POINTER;
        END;

DQ$DELETE: PROCEDURE (path$p,excep$p) EXTERNAL;
        DECLARE (path$p,excep$p) POINTER;
        END;

DQ$DETACH: PROCEDURE (conn,excep$p) EXTERNAL;
        DECLARE conn CONNECTION, excep$p POINTER;
        END;

DQ$EXIT: PROCEDURE (completion$code) EXTERNAL;
        DECLARE completion$code WORD;
        END;

DQ$FREE: PROCEDURE (segment,excep$p) EXTERNAL;
        DECLARE segment WORD, excep$p POINTER;
        END;

DQ$GET$ARGUMENT: PROCEDURE (argument$p,excep$p) BYTE EXTERNAL;
        DECLARE (argument$p,excep$p) POINTER;
        END;

DQ$GET$CONNECTION$STATUS: PROCEDURE (conn,info$p,excep$p) EXTERNAL;
        DECLARE conn CONNECTION, (info$p,excep$p) POINTER;
        END;

DQ$GET$EXCEPTION$HANDLER: PROCEDURE (handler$p,excep$p) EXTERNAL;
        DECLARE (handler$p,excep$p) POINTER;
        END;

DQ$GET$SIZE: PROCEDURE (segbase,excep$p) WORD EXTERNAL;
        DECLARE segbase WORD, excep$p POINTER;
        END;

DQ$GET$SYSTEM$ID: PROCEDURE (id$p,excep$p) EXTERNAL;
        DECLARE (id$p,excep$p) POINTER;
        END;

DQ$GET$TIME: PROCEDURE (dt$p,excep$p) EXTERNAL;
        DECLARE (dt$p,excep$p) POINTER;
        END;

DQ$OPEN: PROCEDURE (conn,access,num$buf,excep$p) EXTERNAL;
        DECLARE conn CONNECTION, access BYTE, num$buf BYTE,
                excep$p POINTER;
        END;

DQ$OVERLAY: PROCEDURE (name$p,excep$p) EXTERNAL;
        DECLARE (name$p,excep$p) POINTER;
        END;

DQ$READ: PROCEDURE (conn,buf$p,count,excep$p) WORD EXTERNAL;
        DECLARE conn CONNECTION, buf$p POINTER, count WORD,
                excep$p POINTER;
        END;

DQ$RENAME: PROCEDURE (old$p,new$p,excep$p) EXTERNAL;
        DECLARE (old$p,new$p,excep$p) POINTER;
        END;

DQ$SEEK: PROCEDURE (conn,mode,high$offset,low$offset,excep$p) EXTERNAL;
        DECLARE conn CONNECTION, mode BYTE, low$offset WORD,
                high$offset WORD, excep$p POINTER;
        END;
 
DQ$SET$DELIMITERS: PROCEDURE (delimiter$set$p,excep$p) EXTERNAL;
	DECLARE (delimiter$set$p,excep$p) POINTER;
	END;

DQ$SPECIAL: PROCEDURE (type,parameter$p,excep$p) EXTERNAL;
        DECLARE type BYTE, parameter$p POINTER, excep$p POINTER;
        END;

DQ$SWITCH$BUFFER: PROCEDURE (buffer$p,excep$p) WORD EXTERNAL;
        DECLARE (buffer$p,excep$p) POINTER;
        END;

DQ$TRAP$CC: PROCEDURE (handler$p,excep$p) EXTERNAL;
        DECLARE (handler$p,excep$p) POINTER;
        END;

DQ$TRAP$EXCEPTION: PROCEDURE (handler$p,excep$p) EXTERNAL;
        DECLARE (handler$p,excep$p) POINTER;
        END;

DQ$TRUNCATE: PROCEDURE (conn,excep$p) EXTERNAL;
        DECLARE conn CONNECTION, excep$p POINTER;
        END;

DQ$WRITE: PROCEDURE (conn,buf$p,count,excep$p) EXTERNAL;
        DECLARE conn CONNECTION, buf$p POINTER,
                count WORD, excep$p POINTER;
        END;
$RESTORE

