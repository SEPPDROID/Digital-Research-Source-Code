$ !
$ ! Here (vaxmake.com) is the command file for building all of
$ ! DRI's ASM86 on the VAX.  This file is set up to be SUBMITed.
$ !
$ set def [.cmsasm86]
$ assign nl: sys$print
$
$! Assign the Intel disk names and old crosscompiler tool names.
$ @oldintel
$!
$ oplm86 mainp.plm debug optimize(2) xref  
$ oplm86 brexpr.plm debug optimize(2) xref
$ oplm86 cm.plm debug optimize(2) xref
$ oplm86 cm2.plm debug optimize(2) xref
$ oplm86 cmac1.plm debug optimize(2) xref  
$ oplm86 cmac2.plm debug optimize(2) xref  
$ oplm86 cmac3.plm debug optimize(2) xref  
$ oplm86 cmac4.plm debug optimize(2) xref  
$ oplm86 cmac5.plm debug optimize(2) xref  
$ oplm86 cmsubr.plm debug optimize(2) xref
$ oplm86 dline.plm debug optimize(2) xref
$ oplm86 ermod.plm debug optimize(2) xref 
$ oplm86 expr.plm debug optimize(2) xref 
$ oplm86 files.plm debug optimize(2) xref  
$ oplm86 global.plm debug optimize(2) xref
$ oplm86 instr.plm debug optimize(2) xref
$ oplm86 io.plm debug optimize(2) xref  
$ oplm86 mnem1.plm debug optimize(2) xref  
$ oplm86 mnem2.plm debug optimize(2) xref  
$ oplm86 mnem3.plm debug optimize(2) xref  
$ oplm86 mnem4.plm debug optimize(2) xref  
$ oplm86 outp.plm debug optimize(2) xref  
$ oplm86 predef.plm debug optimize(2) xref 
$ oplm86 print.plm debug optimize(2) xref  
$ oplm86 pseud1.plm debug optimize(2) xref
$ oplm86 pseud2.plm debug optimize(2) xref
$ oplm86 scan.plm debug optimize(2) xref  
$ oplm86 subr1.plm debug optimize(2) xref  
$ oplm86 subr2.plm debug optimize(2) xref  
$ oplm86 symb.plm debug optimize(2) xref  
$ oplm86 text.plm debug optimize(2) xref 
$
$ oasm86 c86lnk.asm debug
$ !
$ olink86 cmac1.obj,cmac2.obj,cmac3.obj,cmac4.obj,cmac5.obj to f11.mod
$ olink86 mnem1.obj,mnem2.obj,mnem3.obj,mnem4.obj,symb.obj to f12.mod
$ olink86 io.obj,subr1.obj,subr2.obj,files.obj,scan.obj to f13.mod
$ olink86 print.obj,predef.obj,ermod.obj,text.obj,outp.obj to f14.mod
$ olink86 expr.obj,brexpr.obj,pseud1.obj,pseud2.obj,cmsubr.obj to f15.mod
$ olink86 instr.obj,dline.obj,global.obj,cm.obj,cm2.obj to f16.mod
$ olink86 f11.mod,f12.mod,f13.mod to f21.mod
$ olink86 f14.mod,f15.mod,f16.mod to f22.mod
$ olink86 c86lnk.obj,mainp.obj,f21.mod,f22.mod,plm86.lib to asm86.mod
$ oloc86 asm86.mod to asm86.abs ad(sm(code(0))) od(sm(code,const,stack))
$ oh86 asm86.abs
$!
$! search for the starts of the CONST and MEMORY segments...
$ search asm86.mp2 "G   CONST","G   MEMORY"
$! 
$!   Do the rest on CP/M:
$! 
$!  Determine BBB, MMM and NNN from asm86.mp2 (from the output from
$!  the search command):
$!  BBB = start of const segment / 16
$!  MMM = start of memory segment / 16
$!  Then NNN = (MMM - BBB) + 100h
$!  (100h leaves 4K bytes of space for the symbol table)
$!  gencmd asm86 data[bBBB,mNNN,xFFF]
$! An example:
$! gencmd asm86 data[b4AD,m44E,xFFF]
